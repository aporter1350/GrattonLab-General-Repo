#!/bin/tcsh -xef

echo "auto-generated by afni_proc.py, Tue Nov  5 14:16:08 2019"
echo "(version 6.41, June 19, 2019)"
echo "execution started: `date`"

# to execute via tcsh: 
#   tcsh -xef /projects/b1081/proc.preprocAFNI.sub-INET006.sess-1_PathtoBase |& tee /projects/b1081/output.proc.preprocAFNI.sub-INET006.sess-1_PathtoBase
# to execute via bash: 
#   tcsh -xef /projects/b1081/proc.preprocAFNI.sub-INET006.sess-1_PathtoBase 2>&1 | tee /projects/b1081/output.proc.preprocAFNI.sub-INET006.sess-1_PathtoBase

# =========================== auto block: setup ============================
# script setup

# take note of the AFNI version
afni -ver

# check that the current AFNI version is recent enough
afni_history -check_date 10 May 2019
if ( $status ) then
    echo "** this script requires newer AFNI binaries (than 10 May 2019)"
    echo "   (consider: @update.afni.binaries -defaults)"
    exit
endif

# the user may specify a single subject to run with
if ( $#argv > 0 ) then
    set subj = $argv[1]
else
    set subj = INET006
endif

# assign output directory name
set output_dir = /projects/b1081/ses_1_TestOutput/

# verify that the results directory does not yet exist
if ( -d $output_dir ) then
    echo output dir "$subj.results" already exists
    exit
endif

# set list of runs
set runs = (`count -digits 2 1 15`)

# create results and stimuli directories
mkdir $output_dir
mkdir $output_dir/stimuli

# copy anatomy to results dir
3dcopy                                                                                        \
    Input_Globus/ForQuest/sub-INET006/ses-1/anat/sub-INET006_ses-1_acq-RMS_T1w_defaced.nii.gz \
    $output_dir/sub-INET006_ses-1_acq-RMS_T1w_defaced

# ============================ auto block: tcat ============================
# apply 3dTcat to copy input dsets to results dir,
# while removing the first 0 TRs
3dTcat -prefix $output_dir/pb00.$subj.r01.tcat                                \
    Input_Globus/ForQuest/sub-INET006/ses-1/func/sub-INET006_ses-1_task-mixed_run-01_bold.nii.gz'[0..$]'
3dTcat -prefix $output_dir/pb00.$subj.r02.tcat                                \
    Input_Globus/ForQuest/sub-INET006/ses-1/func/sub-INET006_ses-1_task-mixed_run-02_bold.nii.gz'[0..$]'
3dTcat -prefix $output_dir/pb00.$subj.r03.tcat                                \
    Input_Globus/ForQuest/sub-INET006/ses-1/func/sub-INET006_ses-1_task-mixed_run-03_bold.nii.gz'[0..$]'
3dTcat -prefix $output_dir/pb00.$subj.r04.tcat                                \
    Input_Globus/ForQuest/sub-INET006/ses-1/func/sub-INET006_ses-1_task-mixed_run-04_bold.nii.gz'[0..$]'
3dTcat -prefix $output_dir/pb00.$subj.r05.tcat                                \
    Input_Globus/ForQuest/sub-INET006/ses-1/func/sub-INET006_ses-1_task-rest_run-01_bold.nii.gz'[0..$]'
3dTcat -prefix $output_dir/pb00.$subj.r06.tcat                                \
    Input_Globus/ForQuest/sub-INET006/ses-1/func/sub-INET006_ses-1_task-rest_run-02_bold.nii.gz'[0..$]'
3dTcat -prefix $output_dir/pb00.$subj.r07.tcat                                \
    Input_Globus/ForQuest/sub-INET006/ses-1/func/sub-INET006_ses-1_task-rest_run-03_bold.nii.gz'[0..$]'
3dTcat -prefix $output_dir/pb00.$subj.r08.tcat                                \
    Input_Globus/ForQuest/sub-INET006/ses-1/func/sub-INET006_ses-1_task-rest_run-04_bold.nii.gz'[0..$]'
3dTcat -prefix $output_dir/pb00.$subj.r09.tcat                                \
    Input_Globus/ForQuest/sub-INET006/ses-1/func/sub-INET006_ses-1_task-rest_run-05_bold.nii.gz'[0..$]'
3dTcat -prefix $output_dir/pb00.$subj.r10.tcat                                \
    Input_Globus/ForQuest/sub-INET006/ses-1/func/sub-INET006_ses-1_task-rest_run-06_bold.nii.gz'[0..$]'
3dTcat -prefix $output_dir/pb00.$subj.r11.tcat                                \
    Input_Globus/ForQuest/sub-INET006/ses-1/func/sub-INET006_ses-1_task-rest_run-07_bold.nii.gz'[0..$]'
3dTcat -prefix $output_dir/pb00.$subj.r12.tcat                                \
    Input_Globus/ForQuest/sub-INET006/ses-1/func/sub-INET006_ses-1_task-slowreveal_run-01_bold.nii.gz'[0..$]'
3dTcat -prefix $output_dir/pb00.$subj.r13.tcat                                \
    Input_Globus/ForQuest/sub-INET006/ses-1/func/sub-INET006_ses-1_task-slowreveal_run-02_bold.nii.gz'[0..$]'
3dTcat -prefix $output_dir/pb00.$subj.r14.tcat                                \
    Input_Globus/ForQuest/sub-INET006/ses-1/func/sub-INET006_ses-1_task-slowreveal_run-03_bold.nii.gz'[0..$]'
3dTcat -prefix $output_dir/pb00.$subj.r15.tcat                                \
    Input_Globus/ForQuest/sub-INET006/ses-1/func/sub-INET006_ses-1_task-slowreveal_run-04_bold.nii.gz'[0..$]'

# and make note of repetitions (TRs) per run
set tr_counts = ( 450 450 450 450 270 270 270 270 270 270 270 440 440 440 440 \
    )

# -------------------------------------------------------
# enter the results directory (can begin processing data)
cd $output_dir


# ========================== auto block: outcount ==========================
# data check: compute outlier fraction for each volume
touch out.pre_ss_warn.txt
foreach run ( $runs )
    3dToutcount -automask -fraction -polort 4 -legendre                     \
                pb00.$subj.r$run.tcat+orig > outcount.r$run.1D

    # outliers at TR 0 might suggest pre-steady state TRs
    if ( `1deval -a outcount.r$run.1D"{0}" -expr "step(a-0.4)"` ) then
        echo "** TR #0 outliers: possible pre-steady state TRs in run $run" \
            >> out.pre_ss_warn.txt
    endif
end

# catenate outlier counts into a single time series
cat outcount.r*.1D > outcount_rall.1D

# get run number and TR index for minimum outlier volume
set minindex = `3dTstat -argmin -prefix - outcount_rall.1D\'`
set ovals = ( `1d_tool.py -set_run_lengths $tr_counts                       \
                          -index_to_run_tr $minindex` )
# save run and TR indices for extraction of vr_base_min_outlier
set minoutrun = $ovals[1]
set minouttr  = $ovals[2]
echo "min outlier: run $minoutrun, TR $minouttr" | tee out.min_outlier.txt

# ================================ despike =================================
# apply 3dDespike to each run
foreach run ( $runs )
    3dDespike -NEW -nomask -prefix pb01.$subj.r$run.despike \
        pb00.$subj.r$run.tcat+orig
end

# --------------------------------
# extract volreg registration base
3dbucket -prefix vr_base_min_outlier                        \
    pb01.$subj.r$minoutrun.despike+orig"[$minouttr]"

# ================================= align ==================================
# for e2a: compute anat alignment transformation to EPI registration base
# (new anat will be intermediate, stripped,                                  \
#     sub-INET006_ses-1_acq-RMS_T1w_defaced_ns+orig)
align_epi_anat.py -anat2epi -anat sub-INET006_ses-1_acq-RMS_T1w_defaced+orig \
       -save_skullstrip -suffix _al_junk                                     \
       -epi vr_base_min_outlier+orig -epi_base 0                             \
       -epi_strip 3dAutomask                                                 \
       -cost lpc+ZZ -AddEdge -giant_move                                     \
       -volreg off -tshift off

# ================================== tlrc ==================================
# warp anatomy to standard space (non-linear warp)
auto_warp.py -base /projects/b1081/Templates/MNI152_T1_2009c+tlrc -input \
             sub-INET006_ses-1_acq-RMS_T1w_defaced_ns+orig               \
             -skull_strip_input no

# move results up out of the awpy directory
# - NL-warped anat, affine warp, NL warp
# - use typical standard space name for anat
# - wildcard is a cheap way to go after any .gz
# - be sure NIFTI sform_code=2 means standard space
3dbucket -DAFNI_NIFTI_VIEW=tlrc                                          \
         -prefix sub-INET006_ses-1_acq-RMS_T1w_defaced_ns                \
         awpy/sub-INET006_ses-1_acq-RMS_T1w_defaced_ns.aw.nii*
mv awpy/anat.un.aff.Xat.1D .
mv awpy/anat.un.aff.qw_WARP.nii .

# ================================= volreg =================================
# align each dset to base volume, across runs, to anat, warp to tlrc space

# verify that we have a +tlrc warp dataset
if ( ! -f sub-INET006_ses-1_acq-RMS_T1w_defaced_ns+tlrc.HEAD ) then
    echo "** missing +tlrc warp dataset:                                      \
        sub-INET006_ses-1_acq-RMS_T1w_defaced_ns+tlrc.HEAD" 
    exit
endif

# register and warp
foreach run ( $runs )
    # extract volreg base for this run
    3dbucket -prefix vr_base_per_run_r$run pb01.$subj.r$run.despike+orig'[0]'
    
    # and compute xforms for cross-run allin to vr_base
    3dAllineate -base vr_base_min_outlier+orig                                \
                -source vr_base_per_run_r$run+orig                            \
                -1Dfile vr_xrun_allin_dfile.m12.r$run.1D                      \
                -1Dmatrix_save mat.vr_xrun_allin.r$run.aff12.1D               \
                -autoweight -source_automask                                  \
                -lpa -cubic

    # register each volume to the base image
    3dvolreg -verbose -zpad 1 -base vr_base_per_run_r$run+orig                \
             -1Dfile dfile.r$run.1D -prefix rm.epi.volreg.r$run               \
             -cubic                                                           \
             -1Dmatrix_save mat.r$run.vr.aff12.1D                             \
             pb01.$subj.r$run.despike+orig

    # create an all-1 dataset to mask the extents of the warp
    3dcalc -overwrite -a pb01.$subj.r$run.despike+orig -expr 1                \
           -prefix rm.epi.all1

    # catenate volreg/post_vr_allin/epi2anat/tlrc xforms
    cat_matvec -ONELINE                                                       \
               anat.un.aff.Xat.1D                                             \
               sub-INET006_ses-1_acq-RMS_T1w_defaced_al_junk_mat.aff12.1D -I  \
               mat.vr_xrun_allin.r$run.aff12.1D                               \
               mat.r$run.vr.aff12.1D > mat.r$run.warp.aff12.1D

    # apply catenated xform: volreg/post_vr_allin/epi2anat/tlrc/NLtlrc
    # then apply non-linear standard-space warp
    3dNwarpApply -master sub-INET006_ses-1_acq-RMS_T1w_defaced_ns+tlrc -dxyz  \
                 2.5                                                          \
                 -source pb01.$subj.r$run.despike+orig                        \
                 -nwarp "anat.un.aff.qw_WARP.nii mat.r$run.warp.aff12.1D"     \
                 -prefix rm.epi.nomask.r$run

    # warp the all-1 dataset for extents masking 
    3dNwarpApply -master sub-INET006_ses-1_acq-RMS_T1w_defaced_ns+tlrc -dxyz  \
                 2.5                                                          \
                 -source rm.epi.all1+orig                                     \
                 -nwarp "anat.un.aff.qw_WARP.nii mat.r$run.warp.aff12.1D"     \
                 -interp cubic                                                \
                 -ainterp NN -quiet                                           \
                 -prefix rm.epi.1.r$run

    # make an extents intersection mask of this run
    3dTstat -min -prefix rm.epi.min.r$run rm.epi.1.r$run+tlrc
end

# make a single file of registration params
cat dfile.r*.1D > dfile_rall.1D

# compute motion magnitude time series: the Euclidean norm
# (sqrt(sum squares)) of the motion parameter derivatives
1d_tool.py -infile dfile_rall.1D                                              \
           -set_run_lengths 450 450 450 450 270 270 270 270 270 270 270 440   \
           440 440 440                                                        \
           -derivative -collapse_cols euclidean_norm                          \
           -write motion_${subj}_enorm.1D

# ----------------------------------------
# create the extents mask: mask_epi_extents+tlrc
# (this is a mask of voxels that have valid data at every TR)
3dMean -datum short -prefix rm.epi.mean rm.epi.min.r*.HEAD 
3dcalc -a rm.epi.mean+tlrc -expr 'step(a-0.999)' -prefix mask_epi_extents

# and apply the extents mask to the EPI data 
# (delete any time series with missing data)
foreach run ( $runs )
    3dcalc -a rm.epi.nomask.r$run+tlrc -b mask_epi_extents+tlrc               \
           -expr 'a*b' -prefix pb02.$subj.r$run.volreg
end

# warp the volreg base EPI dataset to make a final version
cat_matvec -ONELINE                                                           \
           anat.un.aff.Xat.1D                                                 \
           sub-INET006_ses-1_acq-RMS_T1w_defaced_al_junk_mat.aff12.1D -I  >   \
           mat.basewarp.aff12.1D

3dNwarpApply -master sub-INET006_ses-1_acq-RMS_T1w_defaced_ns+tlrc -dxyz 2.5  \
             -source vr_base_min_outlier+orig                                 \
             -nwarp "anat.un.aff.qw_WARP.nii mat.basewarp.aff12.1D"           \
             -prefix final_epi_vr_base_min_outlier

# create an anat_final dataset, aligned with stats
3dcopy sub-INET006_ses-1_acq-RMS_T1w_defaced_ns+tlrc anat_final.$subj

# record final registration costs
3dAllineate -base final_epi_vr_base_min_outlier+tlrc -allcostX                \
            -input anat_final.$subj+tlrc |& tee out.allcostX.txt

# -----------------------------------------
# warp anat follower datasets (non-linear)
3dNwarpApply -source sub-INET006_ses-1_acq-RMS_T1w_defaced+orig               \
             -master anat_final.$subj+tlrc                                    \
             -ainterp wsinc5 -nwarp anat.un.aff.qw_WARP.nii anat.un.aff.Xat.1D\
             -prefix anat_w_skull_warped

# ================================== mask ==================================
# create 'full_mask' dataset (union mask)
foreach run ( $runs )
    3dAutomask -prefix rm.mask_r$run pb02.$subj.r$run.volreg+tlrc
end

# create union of inputs, output type is byte
3dmask_tool -inputs rm.mask_r*+tlrc.HEAD -union -prefix full_mask.$subj

# ---- create subject anatomy mask, mask_anat.$subj+tlrc ----
#      (resampled from tlrc anat)
3dresample -master full_mask.$subj+tlrc -input                        \
           sub-INET006_ses-1_acq-RMS_T1w_defaced_ns+tlrc              \
           -prefix rm.resam.anat

# convert to binary anat mask; fill gaps and holes
3dmask_tool -dilate_input 5 -5 -fill_holes -input rm.resam.anat+tlrc  \
            -prefix mask_anat.$subj

# compute tighter EPI mask by intersecting with anat mask
3dmask_tool -input full_mask.$subj+tlrc mask_anat.$subj+tlrc          \
            -inter -prefix mask_epi_anat.$subj

# compute overlaps between anat and EPI masks
3dABoverlap -no_automask full_mask.$subj+tlrc mask_anat.$subj+tlrc    \
            |& tee out.mask_ae_overlap.txt

# note Dice coefficient of masks, as well
3ddot -dodice full_mask.$subj+tlrc mask_anat.$subj+tlrc               \
      |& tee out.mask_ae_dice.txt

# ---- create group anatomy mask, mask_group+tlrc ----
#      (resampled from tlrc base anat, MNI152_T1_2009c+tlrc)
3dresample -master full_mask.$subj+tlrc -prefix ./rm.resam.group      \
           -input /projects/b1081/Templates/MNI152_T1_2009c+tlrc

# convert to binary group mask; fill gaps and holes
3dmask_tool -dilate_input 5 -5 -fill_holes -input rm.resam.group+tlrc \
            -prefix mask_group

# ================================= scale ==================================
# scale each voxel time series to have a mean of 100
# (be sure no negatives creep in)
# (subject to a range of [0,200])
foreach run ( $runs )
    3dTstat -prefix rm.mean_r$run pb02.$subj.r$run.volreg+tlrc
    3dcalc -a pb02.$subj.r$run.volreg+tlrc -b rm.mean_r$run+tlrc \
           -c mask_epi_extents+tlrc                              \
           -expr 'c * min(200, a/b*100)*step(a)*step(b)'         \
           -prefix pb03.$subj.r$run.scale
end

# ================== auto block: generate review scripts ===================

# generate a review script for the unprocessed EPI data
gen_epi_review.py -script @epi_review.$subj \
    -dsets pb00.$subj.r*.tcat+orig.HEAD

# ========================== auto block: finalize ==========================

# remove temporary files
\rm -fr rm.* awpy

# if the basic subject review script is here, run it
# (want this to be the last text output)
if ( -e @ss_review_basic ) then
    ./@ss_review_basic |& tee out.ss_review.$subj.txt

endif

# return to parent directory (just in case...)
cd ..

echo "execution finished: `date`"




# ==========================================================================
# script generated by the command:
#
# afni_proc.py -subj_id INET006 -script                                                                                 \
#     /projects/b1081/proc.preprocAFNI.sub-INET006.sess-1_PathtoBase                                                    \
#     -scr_overwrite -out_dir /projects/b1081/ses_1_TestOutput/ -blocks                                                 \
#     despike align tlrc volreg mask scale -copy_anat                                                                   \
#     /projects/b1081/Input_Globus/ForQuest/sub-INET006/ses-1/anat/sub-INET006_ses-1_acq-RMS_T1w_defaced.nii.gz         \
#     -tcat_remove_first_trs 0 -dsets                                                                                   \
#     /projects/b1081/Input_Globus/ForQuest/sub-INET006/ses-1/func/sub-INET006_ses-1_task-mixed_run-01_bold.nii.gz      \
#     /projects/b1081/Input_Globus/ForQuest/sub-INET006/ses-1/func/sub-INET006_ses-1_task-mixed_run-02_bold.nii.gz      \
#     /projects/b1081/Input_Globus/ForQuest/sub-INET006/ses-1/func/sub-INET006_ses-1_task-mixed_run-03_bold.nii.gz      \
#     /projects/b1081/Input_Globus/ForQuest/sub-INET006/ses-1/func/sub-INET006_ses-1_task-mixed_run-04_bold.nii.gz      \
#     /projects/b1081/Input_Globus/ForQuest/sub-INET006/ses-1/func/sub-INET006_ses-1_task-rest_run-01_bold.nii.gz       \
#     /projects/b1081/Input_Globus/ForQuest/sub-INET006/ses-1/func/sub-INET006_ses-1_task-rest_run-02_bold.nii.gz       \
#     /projects/b1081/Input_Globus/ForQuest/sub-INET006/ses-1/func/sub-INET006_ses-1_task-rest_run-03_bold.nii.gz       \
#     /projects/b1081/Input_Globus/ForQuest/sub-INET006/ses-1/func/sub-INET006_ses-1_task-rest_run-04_bold.nii.gz       \
#     /projects/b1081/Input_Globus/ForQuest/sub-INET006/ses-1/func/sub-INET006_ses-1_task-rest_run-05_bold.nii.gz       \
#     /projects/b1081/Input_Globus/ForQuest/sub-INET006/ses-1/func/sub-INET006_ses-1_task-rest_run-06_bold.nii.gz       \
#     /projects/b1081/Input_Globus/ForQuest/sub-INET006/ses-1/func/sub-INET006_ses-1_task-rest_run-07_bold.nii.gz       \
#     /projects/b1081/Input_Globus/ForQuest/sub-INET006/ses-1/func/sub-INET006_ses-1_task-slowreveal_run-01_bold.nii.gz \
#     /projects/b1081/Input_Globus/ForQuest/sub-INET006/ses-1/func/sub-INET006_ses-1_task-slowreveal_run-02_bold.nii.gz \
#     /projects/b1081/Input_Globus/ForQuest/sub-INET006/ses-1/func/sub-INET006_ses-1_task-slowreveal_run-03_bold.nii.gz \
#     /projects/b1081/Input_Globus/ForQuest/sub-INET006/ses-1/func/sub-INET006_ses-1_task-slowreveal_run-04_bold.nii.gz \
#     -align_opts_aea -cost lpc+ZZ -AddEdge -giant_move -tlrc_base                                                      \
#     /projects/b1081/Templates/MNI152_T1_2009c+tlrc -tlrc_NL_warp                                                      \
#     -volreg_align_to MIN_OUTLIER -volreg_post_vr_allin yes                                                            \
#     -volreg_align_e2a -volreg_tlrc_warp -bash
