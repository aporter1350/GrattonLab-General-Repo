#!/bin/tcsh -xef

echo "auto-generated by afni_proc.py, Mon Jul  1 18:51:21 2019"
echo "(version 6.34, April 25, 2019)"
echo "execution started: `date`"

# to execute via tcsh: 
#   tcsh -xef TestOfSL_NoVoa.tcsh |& tee output.TestOfSL_NoVoa.tcsh
# to execute via bash: 
#   tcsh -xef TestOfSL_NoVoa.tcsh 2>&1 | tee output.TestOfSL_NoVoa.tcsh

# =========================== auto block: setup ============================
# script setup

# take note of the AFNI version
afni -ver

# check that the current AFNI version is recent enough
afni_history -check_date 17 Jan 2019
if ( $status ) then
    echo "** this script requires newer AFNI binaries (than 17 Jan 2019)"
    echo "   (consider: @update.afni.binaries -defaults)"
    exit
endif

# the user may specify a single subject to run with
if ( $#argv > 0 ) then
    set subj = $argv[1]
else
    set subj = TestOfSL_NoVoa01_RUN
endif

# assign output directory name
set output_dir = $subj.results

# verify that the results directory does not yet exist
if ( -d $output_dir ) then
    echo output dir "$subj.results" already exists
    exit
endif

# set list of runs
set runs = (`count -digits 2 1 6`)

# create results and stimuli directories
mkdir $output_dir
mkdir $output_dir/stimuli

# copy stim files into stimulus directory
cp                                                                                                                   \
    /Users/derek.smith/Desktop/General_Testing_Folder/iNetworks_AFNI_Tstat_Test/sl/stimuli_No_VOA/corr1_3.txt        \
    /Users/derek.smith/Desktop/General_Testing_Folder/iNetworks_AFNI_Tstat_Test/sl/stimuli_No_VOA/corr4.txt          \
    /Users/derek.smith/Desktop/General_Testing_Folder/iNetworks_AFNI_Tstat_Test/sl/stimuli_No_VOA/corr5.txt          \
    /Users/derek.smith/Desktop/General_Testing_Folder/iNetworks_AFNI_Tstat_Test/sl/stimuli_No_VOA/corr6.txt          \
    /Users/derek.smith/Desktop/General_Testing_Folder/iNetworks_AFNI_Tstat_Test/sl/stimuli_No_VOA/corr7.txt          \
    /Users/derek.smith/Desktop/General_Testing_Folder/iNetworks_AFNI_Tstat_Test/sl/stimuli_No_VOA/error4.txt         \
    /Users/derek.smith/Desktop/General_Testing_Folder/iNetworks_AFNI_Tstat_Test/sl/stimuli_No_VOA/error5.txt         \
    /Users/derek.smith/Desktop/General_Testing_Folder/iNetworks_AFNI_Tstat_Test/sl/stimuli_No_VOA/error6.txt         \
    /Users/derek.smith/Desktop/General_Testing_Folder/iNetworks_AFNI_Tstat_Test/sl/stimuli_No_VOA/error7.txt         \
    /Users/derek.smith/Desktop/General_Testing_Folder/iNetworks_AFNI_Tstat_Test/sl/stimuli_No_VOA/error_omission.txt \
    $output_dir/stimuli

# copy anatomy to results dir
3dcopy anat/struc1_e1.nii $output_dir/struc1_e1

# ============================ auto block: tcat ============================
# apply 3dTcat to copy input dsets to results dir,
# while removing the first 0 TRs
3dTcat -prefix $output_dir/pb00.$subj.r01.tcat func/func_1.nii'[0..$]'
3dTcat -prefix $output_dir/pb00.$subj.r02.tcat func/func_2.nii'[0..$]'
3dTcat -prefix $output_dir/pb00.$subj.r03.tcat func/func_3.nii'[0..$]'
3dTcat -prefix $output_dir/pb00.$subj.r04.tcat func/func_4.nii'[0..$]'
3dTcat -prefix $output_dir/pb00.$subj.r05.tcat func/func_5.nii'[0..$]'
3dTcat -prefix $output_dir/pb00.$subj.r06.tcat func/func_6.nii'[0..$]'

# and make note of repetitions (TRs) per run
set tr_counts = ( 400 420 440 440 440 440 )

# -------------------------------------------------------
# enter the results directory (can begin processing data)
cd $output_dir


# ========================== auto block: outcount ==========================
# data check: compute outlier fraction for each volume
touch out.pre_ss_warn.txt
foreach run ( $runs )
    3dToutcount -automask -fraction -polort 3 -legendre                     \
                pb00.$subj.r$run.tcat+orig > outcount.r$run.1D

    # outliers at TR 0 might suggest pre-steady state TRs
    if ( `1deval -a outcount.r$run.1D"{0}" -expr "step(a-0.4)"` ) then
        echo "** TR #0 outliers: possible pre-steady state TRs in run $run" \
            >> out.pre_ss_warn.txt
    endif
end

# catenate outlier counts into a single time series
cat outcount.r*.1D > outcount_rall.1D

# get run number and TR index for minimum outlier volume
set minindex = `3dTstat -argmin -prefix - outcount_rall.1D\'`
set ovals = ( `1d_tool.py -set_run_lengths $tr_counts                       \
                          -index_to_run_tr $minindex` )
# save run and TR indices for extraction of vr_base_min_outlier
set minoutrun = $ovals[1]
set minouttr  = $ovals[2]
echo "min outlier: run $minoutrun, TR $minouttr" | tee out.min_outlier.txt

# ================================ despike =================================
# apply 3dDespike to each run
foreach run ( $runs )
    3dDespike -NEW -nomask -prefix pb01.$subj.r$run.despike \
        pb00.$subj.r$run.tcat+orig
end

# --------------------------------
# extract volreg registration base
3dbucket -prefix vr_base_min_outlier                        \
    pb01.$subj.r$minoutrun.despike+orig"[$minouttr]"

# ================================= align ==================================
# for e2a: compute anat alignment transformation to EPI registration base
# (new anat will be intermediate, stripped, struc1_e1_ns+orig)
align_epi_anat.py -anat2epi -anat struc1_e1+orig \
       -save_skullstrip -suffix _al_junk         \
       -epi vr_base_min_outlier+orig -epi_base 0 \
       -epi_strip 3dAutomask                     \
       -AddEdge -giant_move                      \
       -volreg off -tshift off

# ================================= volreg =================================
# align each dset to base volume, across runs, to anat

# register and warp
foreach run ( $runs )
    # extract MIN_OUTLIER index for current run
    set min_outlier_index = `3dTstat -argmin -prefix - outcount.r$run.1D\'`
    
    # extract volreg base for this run
    3dbucket -prefix vr_base_per_run_r$run                      \
        pb01.$subj.r$run.despike+orig"[$min_outlier_index]"
    
    # and compute xforms for cross-run allin to vr_base
    3dAllineate -base vr_base_min_outlier+orig                  \
                -source vr_base_per_run_r$run+orig              \
                -1Dfile vr_xrun_allin_dfile.m12.r$run.1D        \
                -1Dmatrix_save mat.vr_xrun_allin.r$run.aff12.1D \
                -autoweight -source_automask                    \
                -lpa -cubic

    # register each volume to the base image
    3dvolreg -verbose -zpad 1 -base vr_base_per_run_r$run+orig  \
             -1Dfile dfile.r$run.1D -prefix rm.epi.volreg.r$run \
             -cubic                                             \
             -1Dmatrix_save mat.r$run.vr.aff12.1D               \
             pb01.$subj.r$run.despike+orig

    # create an all-1 dataset to mask the extents of the warp
    3dcalc -overwrite -a pb01.$subj.r$run.despike+orig -expr 1  \
           -prefix rm.epi.all1

    # catenate volreg/post_vr_allin/epi2anat xforms
    cat_matvec -ONELINE                                         \
               struc1_e1_al_junk_mat.aff12.1D -I                \
               mat.vr_xrun_allin.r$run.aff12.1D                 \
               mat.r$run.vr.aff12.1D > mat.r$run.warp.aff12.1D

    # apply catenated xform: volreg/post_vr_allin/epi2anat
    3dAllineate -base struc1_e1_ns+orig                         \
                -input pb01.$subj.r$run.despike+orig            \
                -1Dmatrix_apply mat.r$run.warp.aff12.1D         \
                -mast_dxyz 2.5                                  \
                -prefix rm.epi.nomask.r$run

    # warp the all-1 dataset for extents masking 
    3dAllineate -base struc1_e1_ns+orig                         \
                -input rm.epi.all1+orig                         \
                -1Dmatrix_apply mat.r$run.warp.aff12.1D         \
                -mast_dxyz 2.5 -final NN -quiet                 \
                -prefix rm.epi.1.r$run

    # make an extents intersection mask of this run
    3dTstat -min -prefix rm.epi.min.r$run rm.epi.1.r$run+orig
end

# make a single file of registration params
cat dfile.r*.1D > dfile_rall.1D

# ----------------------------------------
# create the extents mask: mask_epi_extents+orig
# (this is a mask of voxels that have valid data at every TR)
3dMean -datum short -prefix rm.epi.mean rm.epi.min.r*.HEAD 
3dcalc -a rm.epi.mean+orig -expr 'step(a-0.999)' -prefix mask_epi_extents

# and apply the extents mask to the EPI data 
# (delete any time series with missing data)
foreach run ( $runs )
    3dcalc -a rm.epi.nomask.r$run+orig -b mask_epi_extents+orig \
           -expr 'a*b' -prefix pb02.$subj.r$run.volreg
end

# warp the volreg base EPI dataset to make a final version
cat_matvec -ONELINE struc1_e1_al_junk_mat.aff12.1D -I  > mat.basewarp.aff12.1D

3dAllineate -base struc1_e1_ns+orig                             \
            -input vr_base_min_outlier+orig                     \
            -1Dmatrix_apply mat.basewarp.aff12.1D               \
            -mast_dxyz 2.5                                      \
            -prefix final_epi_vr_base_min_outlier

# create an anat_final dataset, aligned with stats
3dcopy struc1_e1_ns+orig anat_final.$subj

# record final registration costs
3dAllineate -base final_epi_vr_base_min_outlier+orig -allcostX  \
            -input anat_final.$subj+orig |& tee out.allcostX.txt

# -----------------------------------------
# warp anat follower datasets (identity: resample)

# ================================== blur ==================================
# blur each volume of each run
foreach run ( $runs )
    3dmerge -1blur_fwhm 4 -doall -prefix pb03.$subj.r$run.blur \
            pb02.$subj.r$run.volreg+orig
end

# ================================== mask ==================================
# create 'full_mask' dataset (union mask)
foreach run ( $runs )
    3dAutomask -prefix rm.mask_r$run pb03.$subj.r$run.blur+orig
end

# create union of inputs, output type is byte
3dmask_tool -inputs rm.mask_r*+orig.HEAD -union -prefix full_mask.$subj

# ---- create subject anatomy mask, mask_anat.$subj+orig ----
#      (resampled from aligned anat)
3dresample -master full_mask.$subj+orig -input struc1_e1_ns+orig     \
           -prefix rm.resam.anat

# convert to binary anat mask; fill gaps and holes
3dmask_tool -dilate_input 5 -5 -fill_holes -input rm.resam.anat+orig \
            -prefix mask_anat.$subj

# compute tighter EPI mask by intersecting with anat mask
3dmask_tool -input full_mask.$subj+orig mask_anat.$subj+orig         \
            -inter -prefix mask_epi_anat.$subj

# compute overlaps between anat and EPI masks
3dABoverlap -no_automask full_mask.$subj+orig mask_anat.$subj+orig   \
            |& tee out.mask_ae_overlap.txt

# note Dice coefficient of masks, as well
3ddot -dodice full_mask.$subj+orig mask_anat.$subj+orig              \
      |& tee out.mask_ae_dice.txt

# ================================= scale ==================================
# scale each voxel time series to have a mean of 100
# (be sure no negatives creep in)
# (subject to a range of [0,200])
foreach run ( $runs )
    3dTstat -prefix rm.mean_r$run pb03.$subj.r$run.blur+orig
    3dcalc -a pb03.$subj.r$run.blur+orig -b rm.mean_r$run+orig \
           -c mask_epi_extents+orig                            \
           -expr 'c * min(200, a/b*100)*step(a)*step(b)'       \
           -prefix pb04.$subj.r$run.scale
end

# ================================ regress =================================

# compute de-meaned motion parameters (for use in regression)
1d_tool.py -infile dfile_rall.1D -set_run_lengths 400 420 440 440 440 440    \
           -demean -write motion_demean.1D

# compute motion parameter derivatives (just to have)
1d_tool.py -infile dfile_rall.1D -set_run_lengths 400 420 440 440 440 440    \
           -derivative -demean -write motion_deriv.1D

# convert motion parameters for per-run regression
1d_tool.py -infile motion_demean.1D -set_run_lengths 400 420 440 440 440 440 \
           -split_into_pad_runs mot_demean

# create censor file motion_${subj}_censor.1D, for censoring motion 
1d_tool.py -infile dfile_rall.1D -set_run_lengths 400 420 440 440 440 440    \
    -show_censor_count -censor_prev_TR                                       \
    -censor_motion 0.3 motion_${subj}

# note TRs that were not censored
set ktrs = `1d_tool.py -infile motion_${subj}_censor.1D                      \
                       -show_trs_uncensored encoded`

# ------------------------------
# run the regression analysis
3dDeconvolve -input pb04.$subj.r*.scale+orig.HEAD                            \
    -censor motion_${subj}_censor.1D                                         \
    -ortvec mot_demean.r01.1D mot_demean_r01                                 \
    -ortvec mot_demean.r02.1D mot_demean_r02                                 \
    -ortvec mot_demean.r03.1D mot_demean_r03                                 \
    -ortvec mot_demean.r04.1D mot_demean_r04                                 \
    -ortvec mot_demean.r05.1D mot_demean_r05                                 \
    -ortvec mot_demean.r06.1D mot_demean_r06                                 \
    -polort 3                                                                \
    -local_times                                                             \
    -num_stimts 10                                                           \
    -stim_times 1 stimuli/corr1_3.txt 'TENT(0,28.6,27)'                      \
    -stim_label 1 corr1_3                                                    \
    -stim_times 2 stimuli/corr4.txt 'TENT(0,28.6,27)'                        \
    -stim_label 2 corr4                                                      \
    -stim_times 3 stimuli/corr5.txt 'TENT(0,28.6,27)'                        \
    -stim_label 3 corr5                                                      \
    -stim_times 4 stimuli/corr6.txt 'TENT(0,28.6,27)'                        \
    -stim_label 4 corr6                                                      \
    -stim_times 5 stimuli/corr7.txt 'TENT(0,28.6,27)'                        \
    -stim_label 5 corr7                                                      \
    -stim_times 6 stimuli/error4.txt 'TENT(0,28.6,27)'                       \
    -stim_label 6 error_omission                                             \
    -stim_times 7 stimuli/error5.txt 'TENT(0,28.6,27)'                       \
    -stim_label 7 error4                                                     \
    -stim_times 8 stimuli/error6.txt 'TENT(0,28.6,27)'                       \
    -stim_label 8 error5                                                     \
    -stim_times 9 stimuli/error7.txt 'TENT(0,28.6,27)'                       \
    -stim_label 9 error6                                                     \
    -stim_times 10 stimuli/error_omission.txt 'TENT(0,28.6,27)'              \
    -stim_label 10 error7                                                    \
    -iresp 1 iresp_corr1_3.$subj                                             \
    -iresp 2 iresp_corr4.$subj                                               \
    -iresp 3 iresp_corr5.$subj                                               \
    -iresp 4 iresp_corr6.$subj                                               \
    -iresp 5 iresp_corr7.$subj                                               \
    -iresp 6 iresp_error_omission.$subj                                      \
    -iresp 7 iresp_error4.$subj                                              \
    -iresp 8 iresp_error5.$subj                                              \
    -iresp 9 iresp_error6.$subj                                              \
    -iresp 10 iresp_error7.$subj                                             \
    -float                                                                   \
    -jobs 4                                                                  \
    -fout -tout -x1D X.xmat.1D -xjpeg X.jpg                                  \
    -x1D_uncensored X.nocensor.xmat.1D                                       \
    -fitts fitts.$subj                                                       \
    -errts errts.${subj}                                                     \
    -bucket stats.$subj


# if 3dDeconvolve fails, terminate the script
if ( $status != 0 ) then
    echo '---------------------------------------'
    echo '** 3dDeconvolve error, failing...'
    echo '   (consider the file 3dDeconvolve.err)'
    exit
endif


# display any large pairwise correlations from the X-matrix
1d_tool.py -show_cormat_warnings -infile X.xmat.1D |& tee out.cormat_warn.txt

# display degrees of freedom info from X-matrix
1d_tool.py -show_df_info -infile X.xmat.1D |& tee out.df_info.txt

# look for odd timing in files for TENT functions
timing_tool.py -multi_timing stimuli/corr1_3.txt                             \
                             stimuli/corr4.txt                               \
                             stimuli/corr5.txt                               \
                             stimuli/corr6.txt                               \
                             stimuli/corr7.txt                               \
                             stimuli/error4.txt                              \
                             stimuli/error5.txt                              \
                             stimuli/error6.txt                              \
                             stimuli/error7.txt                              \
                             stimuli/error_omission.txt                      \
               -tr 1.1 -warn_tr_stats |& tee out.TENT_warn.txt

# create an all_runs dataset to match the fitts, errts, etc.
3dTcat -prefix all_runs.$subj pb04.$subj.r*.scale+orig.HEAD

# --------------------------------------------------
# create a temporal signal to noise ratio dataset 
#    signal: if 'scale' block, mean should be 100
#    noise : compute standard deviation of errts
3dTstat -mean -prefix rm.signal.all all_runs.$subj+orig"[$ktrs]"
3dTstat -stdev -prefix rm.noise.all errts.${subj}+orig"[$ktrs]"
3dcalc -a rm.signal.all+orig                                                 \
       -b rm.noise.all+orig                                                  \
       -c full_mask.$subj+orig                                               \
       -expr 'c*a/b' -prefix TSNR.$subj 

# ---------------------------------------------------
# compute and store GCOR (global correlation average)
# (sum of squares of global mean of unit errts)
3dTnorm -norm2 -prefix rm.errts.unit errts.${subj}+orig
3dmaskave -quiet -mask full_mask.$subj+orig rm.errts.unit+orig               \
          > gmean.errts.unit.1D
3dTstat -sos -prefix - gmean.errts.unit.1D\' > out.gcor.1D
echo "-- GCOR = `cat out.gcor.1D`"

# ---------------------------------------------------
# compute correlation volume
# (per voxel: average correlation across masked brain)
# (now just dot product with average unit time series)
3dcalc -a rm.errts.unit+orig -b gmean.errts.unit.1D -expr 'a*b' -prefix rm.DP
3dTstat -sum -prefix corr_brain rm.DP+orig

# --------------------------------------------------------
# compute sum of non-baseline regressors from the X-matrix
# (use 1d_tool.py to get list of regressor colums)
set reg_cols = `1d_tool.py -infile X.nocensor.xmat.1D -show_indices_interest`
3dTstat -sum -prefix sum_ideal.1D X.nocensor.xmat.1D"[$reg_cols]"

# also, create a stimulus-only X-matrix, for easy review
1dcat X.nocensor.xmat.1D"[$reg_cols]" > X.stim.xmat.1D

# ============================ blur estimation =============================
# compute blur estimates
touch blur_est.$subj.1D   # start with empty file

# create directory for ACF curve files
mkdir files_ACF

# -- estimate blur for each run in epits --
touch blur.epits.1D

# restrict to uncensored TRs, per run
foreach run ( $runs )
    set trs = `1d_tool.py -infile X.xmat.1D -show_trs_uncensored encoded     \
                          -show_trs_run $run`
    if ( $trs == "" ) continue
    3dFWHMx -detrend -mask full_mask.$subj+orig                              \
            -ACF files_ACF/out.3dFWHMx.ACF.epits.r$run.1D                    \
            all_runs.$subj+orig"[$trs]" >> blur.epits.1D
end

# compute average FWHM blur (from every other row) and append
set blurs = ( `3dTstat -mean -prefix - blur.epits.1D'{0..$(2)}'\'` )
echo average epits FWHM blurs: $blurs
echo "$blurs   # epits FWHM blur estimates" >> blur_est.$subj.1D

# compute average ACF blur (from every other row) and append
set blurs = ( `3dTstat -mean -prefix - blur.epits.1D'{1..$(2)}'\'` )
echo average epits ACF blurs: $blurs
echo "$blurs   # epits ACF blur estimates" >> blur_est.$subj.1D

# -- estimate blur for each run in errts --
touch blur.errts.1D

# restrict to uncensored TRs, per run
foreach run ( $runs )
    set trs = `1d_tool.py -infile X.xmat.1D -show_trs_uncensored encoded     \
                          -show_trs_run $run`
    if ( $trs == "" ) continue
    3dFWHMx -detrend -mask full_mask.$subj+orig                              \
            -ACF files_ACF/out.3dFWHMx.ACF.errts.r$run.1D                    \
            errts.${subj}+orig"[$trs]" >> blur.errts.1D
end

# compute average FWHM blur (from every other row) and append
set blurs = ( `3dTstat -mean -prefix - blur.errts.1D'{0..$(2)}'\'` )
echo average errts FWHM blurs: $blurs
echo "$blurs   # errts FWHM blur estimates" >> blur_est.$subj.1D

# compute average ACF blur (from every other row) and append
set blurs = ( `3dTstat -mean -prefix - blur.errts.1D'{1..$(2)}'\'` )
echo average errts ACF blurs: $blurs
echo "$blurs   # errts ACF blur estimates" >> blur_est.$subj.1D


# ================== auto block: generate review scripts ===================

# generate a review script for the unprocessed EPI data
gen_epi_review.py -script @epi_review.$subj    \
    -dsets pb00.$subj.r*.tcat+orig.HEAD

# generate scripts to review single subject results
# (try with defaults, but do not allow bad exit status)
gen_ss_review_scripts.py -mot_limit 0.3 -exit0 \
    -ss_review_dset out.ss_review.$subj.txt    \
    -write_uvars_json out.ss_review_uvars.json

# ========================== auto block: finalize ==========================

# remove temporary files
\rm -f rm.*

# if the basic subject review script is here, run it
# (want this to be the last text output)
if ( -e @ss_review_basic ) then
    ./@ss_review_basic |& tee out.ss_review.$subj.txt

    # generate html ss review pages
    # (akin to static images from running @ss_review_driver)
    apqc_make_tcsh.py -review_style basic -subj_dir . \
        -uvar_json out.ss_review_uvars.json
    tcsh @ss_review_html |& tee out.review_html
    apqc_make_html.py -qc_dir QC_$subj

    echo "\nconsider running: \n\n    afni_open -b $subj.results/QC_$subj/index.html\n"
endif

# return to parent directory (just in case...)
cd ..

echo "execution finished: `date`"




# ==========================================================================
# script generated by the command:
#
# afni_proc.py -subj_id TestOfSL_NoVoa01_RUN -copy_anat                                                                \
#     /Users/derek.smith/Desktop/General_Testing_Folder/iNetworks_AFNI_Tstat_Test/sl/anat/struc1_e1.nii                \
#     -dsets                                                                                                           \
#     /Users/derek.smith/Desktop/General_Testing_Folder/iNetworks_AFNI_Tstat_Test/sl/func/func_1.nii                   \
#     /Users/derek.smith/Desktop/General_Testing_Folder/iNetworks_AFNI_Tstat_Test/sl/func/func_2.nii                   \
#     /Users/derek.smith/Desktop/General_Testing_Folder/iNetworks_AFNI_Tstat_Test/sl/func/func_3.nii                   \
#     /Users/derek.smith/Desktop/General_Testing_Folder/iNetworks_AFNI_Tstat_Test/sl/func/func_4.nii                   \
#     /Users/derek.smith/Desktop/General_Testing_Folder/iNetworks_AFNI_Tstat_Test/sl/func/func_5.nii                   \
#     /Users/derek.smith/Desktop/General_Testing_Folder/iNetworks_AFNI_Tstat_Test/sl/func/func_6.nii                   \
#     -blocks despike align volreg blur mask scale regress -script                                                     \
#     TestOfSL_NoVoa.tcsh -volreg_align_to MIN_OUTLIER -volreg_align_e2a                                               \
#     -volreg_allin_cost lpa+zz -volreg_post_vr_allin yes                                                              \
#     -volreg_pvra_base_index MIN_OUTLIER -align_opts_aea -AddEdge                                                     \
#     -giant_move -blur_size 4 -regress_stim_times                                                                     \
#     /Users/derek.smith/Desktop/General_Testing_Folder/iNetworks_AFNI_Tstat_Test/sl/stimuli_No_VOA/corr1_3.txt        \
#     /Users/derek.smith/Desktop/General_Testing_Folder/iNetworks_AFNI_Tstat_Test/sl/stimuli_No_VOA/corr4.txt          \
#     /Users/derek.smith/Desktop/General_Testing_Folder/iNetworks_AFNI_Tstat_Test/sl/stimuli_No_VOA/corr5.txt          \
#     /Users/derek.smith/Desktop/General_Testing_Folder/iNetworks_AFNI_Tstat_Test/sl/stimuli_No_VOA/corr6.txt          \
#     /Users/derek.smith/Desktop/General_Testing_Folder/iNetworks_AFNI_Tstat_Test/sl/stimuli_No_VOA/corr7.txt          \
#     /Users/derek.smith/Desktop/General_Testing_Folder/iNetworks_AFNI_Tstat_Test/sl/stimuli_No_VOA/error4.txt         \
#     /Users/derek.smith/Desktop/General_Testing_Folder/iNetworks_AFNI_Tstat_Test/sl/stimuli_No_VOA/error5.txt         \
#     /Users/derek.smith/Desktop/General_Testing_Folder/iNetworks_AFNI_Tstat_Test/sl/stimuli_No_VOA/error6.txt         \
#     /Users/derek.smith/Desktop/General_Testing_Folder/iNetworks_AFNI_Tstat_Test/sl/stimuli_No_VOA/error7.txt         \
#     /Users/derek.smith/Desktop/General_Testing_Folder/iNetworks_AFNI_Tstat_Test/sl/stimuli_No_VOA/error_omission.txt \
#     -regress_stim_labels corr1_3 corr4 corr5 corr6 corr7 error_omission                                              \
#     error4 error5 error6 error7 -regress_basis_multi 'TENT(0,28.6,27)'                                               \
#     'TENT(0,28.6,27)' 'TENT(0,28.6,27)' 'TENT(0,28.6,27)' 'TENT(0,28.6,27)'                                          \
#     'TENT(0,28.6,27)' 'TENT(0,28.6,27)' 'TENT(0,28.6,27)' 'TENT(0,28.6,27)'                                          \
#     'TENT(0,28.6,27)' -regress_local_times -regress_censor_motion 0.3                                                \
#     -regress_motion_per_run -regress_opts_3dD -float -jobs 4                                                         \
#     -regress_est_blur_epits -regress_est_blur_errts -regress_run_clustsim                                            \
#     no -bash
